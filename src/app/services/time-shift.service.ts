import { Injectable } from '@angular/core';
import { CandleWithIndicators } from './indicators.service';
import { CombinedStrategyService, CombinedStrategyParams, CombinedStrategyResults } from './combined-strategy.service';
import { TradingCycle } from './cycle-manager.service';
import { Trade } from './long-strategy.service';
import { ShortTrade } from './short-strategy.service';

export interface TimeShiftParams {
  depositParts: number; // –ù–∞ —Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–µ–π —Ä–∞–∑–±–∏—Ç—å –¥–µ–ø–æ–∑–∏—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)
  entryIntervalDays: number; // –ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤—Ö–æ–¥–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–π —á–∞—Å—Ç—å—é (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 7)
  enabled: boolean; // –í–∫–ª—é—á–µ–Ω –ª–∏ —Ä–µ–∂–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–¥–≤–∏–≥–æ–≤
}

export interface DepositPartResult {
  partId: number; // –ù–æ–º–µ—Ä —á–∞—Å—Ç–∏ –¥–µ–ø–æ–∑–∏—Ç–∞ (1, 2, 3...)
  startOffset: number; // –°–º–µ—â–µ–Ω–∏–µ —Å—Ç–∞—Ä—Ç–∞ –≤ –¥–Ω—è—Ö –æ—Ç –Ω–∞—á–∞–ª–∞ –¥–∞–Ω–Ω—ã—Ö
  actualStartIndex: number; // –†–µ–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Å–≤–µ—á–∏, —Å –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—á–∞–ª–∞—Å—å —Ç–æ—Ä–≥–æ–≤–ª—è
  actualStartTime: string; // –†–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
  strategyResults: CombinedStrategyResults; // –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ï —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–æ—Ä–≥–æ–≤–ª–∏ —ç—Ç–æ–π —á–∞—Å—Ç–∏ (–±–µ–∑ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è)
  depositFraction: number; // –î–æ–ª—è –æ—Ç –æ–±—â–µ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.1 –¥–ª—è 10 —á–∞—Å—Ç–µ–π)
}

export interface TimeShiftResults {
  enabled: boolean;
  params: TimeShiftParams;
  parts: DepositPartResult[];

  // –û–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ –≤—Å–µ–º —á–∞—Å—Ç—è–º (–° –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ò–ï–ú)
  totalRealizedPnl: number; // –°—É–º–º–∞—Ä–Ω—ã–π —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π PnL –≤—Å–µ—Ö —á–∞—Å—Ç–µ–π
  totalUnrealizedPnl: number; // –°—É–º–º–∞—Ä–Ω—ã–π –Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π PnL –≤—Å–µ—Ö —á–∞—Å—Ç–µ–π
  totalPnl: number; // –û–±—â–∏–π PnL
  weightedAverageReturn: number; // –°—Ä–µ–¥–Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  activeParts: number; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Å—Ç–µ–π
  totalCycles: number; // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤ –ø–æ –≤—Å–µ–º —á–∞—Å—Ç—è–º
  totalClosedCycles: number;
  totalOpenCycles: number;
  totalForcedClosures: number;

  // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
  firstEntryTime: string; // –í—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞
  lastEntryTime: string; // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
  totalTradingDays: number; // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –¥–Ω–µ–π
}

@Injectable({
  providedIn: 'root'
})
export class TimeShiftService {

  constructor(
    private combinedStrategy: CombinedStrategyService
  ) {}

  /**
   * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å–¥–≤–∏–≥–∞–º–∏
   */
  testStrategyWithTimeShifts(
    candles: CandleWithIndicators[],
    strategyParams: CombinedStrategyParams,
    timeShiftParams: TimeShiftParams
  ): TimeShiftResults {

    if (!timeShiftParams.enabled) {
      // –ï—Å–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–¥–≤–∏–≥–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã, –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—ã—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
      const singleResult = this.combinedStrategy.testCombinedStrategy(candles, strategyParams);

      return {
        enabled: false,
        params: timeShiftParams,
        parts: [{
          partId: 1,
          startOffset: 0,
          actualStartIndex: 0,
          actualStartTime: candles[0]?.dateUTC2 || '',
          strategyResults: singleResult,
          depositFraction: 1.0
        }],
        totalRealizedPnl: singleResult.totalRealizedPnl,
        totalUnrealizedPnl: singleResult.totalUnrealizedPnl,
        totalPnl: singleResult.totalPnl,
        weightedAverageReturn: singleResult.totalPnl,
        activeParts: 1,
        totalCycles: singleResult.cycles.length,
        totalClosedCycles: singleResult.cycles.filter(c => !c.isActive).length,
        totalOpenCycles: singleResult.cycles.filter(c => c.isActive).length,
        totalForcedClosures: singleResult.forcedClosures,
        firstEntryTime: candles[0]?.dateUTC2 || '',
        lastEntryTime: candles[0]?.dateUTC2 || '',
        totalTradingDays: this.calculateTradingDays(candles)
      };
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å–¥–≤–∏–≥–∞–º–∏
    return this.runTimeShiftedBacktest(candles, strategyParams, timeShiftParams);
  }

  /**
   * –ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å–¥–≤–∏–≥–∞–º–∏
   */
  private runTimeShiftedBacktest(
    candles: CandleWithIndicators[],
    strategyParams: CombinedStrategyParams,
    timeShiftParams: TimeShiftParams
  ): TimeShiftResults {

    const parts: DepositPartResult[] = [];
    const depositFraction = 1 / timeShiftParams.depositParts;

    console.log(`üïí Starting time-shifted backtest:`);
    console.log(`  üìä Deposit parts: ${timeShiftParams.depositParts}`);
    console.log(`  ‚è∞ Entry interval: ${timeShiftParams.entryIntervalDays} days`);
    console.log(`  üí∞ Each part size: ${(depositFraction * 100).toFixed(1)}% of total deposit`);

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å –¥–µ–ø–æ–∑–∏—Ç–∞ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —Å–¥–≤–∏–≥–æ–º
    for (let partId = 1; partId <= timeShiftParams.depositParts; partId++) {
      const startOffsetDays = (partId - 1) * timeShiftParams.entryIntervalDays;
      const startIndex = this.findStartIndex(candles, startOffsetDays);

      if (startIndex >= candles.length - 10) {
        // –ï—Å–ª–∏ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ –∫ –∫–æ–Ω—Ü—É –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç—É —á–∞—Å—Ç—å
        console.log(`‚ö†Ô∏è  Part ${partId}: Skipped (start index ${startIndex} too close to end, total candles: ${candles.length})`);
        continue;
      }

      // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–º–∞—Å—Å–∏–≤ —Å–≤–µ—á–µ–π –Ω–∞—á–∏–Ω–∞—è —Å –Ω—É–∂–Ω–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞
      const partCandles = candles.slice(startIndex);

      console.log(`üöÄ Part ${partId}: Starting from index ${startIndex} (${partCandles[0]?.dateUTC2}) with ${partCandles.length} candles`);

      // –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ë–ï–ó –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è!
      // –ö–∞–∂–¥–∞—è —á–∞—Å—Ç—å —Ç–æ—Ä–≥—É–µ—Ç –∫–∞–∫ –±—É–¥—Ç–æ —É –Ω–µ—ë 100% –¥–µ–ø–æ–∑–∏—Ç–∞
      const partResults = this.combinedStrategy.testCombinedStrategy(partCandles, strategyParams);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ï —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      const partResult: DepositPartResult = {
        partId,
        startOffset: startOffsetDays,
        actualStartIndex: startIndex,
        actualStartTime: partCandles[0]?.dateUTC2 || '',
        strategyResults: partResults, // –ë–ï–ó –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è!
        depositFraction
      };

      parts.push(partResult);

      console.log(`‚úÖ Part ${partId} completed: PnL ${partResults.totalPnl.toFixed(3)}% (${partResults.cycles.length} cycles)`);
    }

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –° –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ò–ï–ú
    return this.calculateAggregatedResults(parts, timeShiftParams, candles);
  }

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç –∏–Ω–¥–µ–∫—Å —Å–≤–µ—á–∏ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å —É—á–µ—Ç–æ–º —Å–¥–≤–∏–≥–∞ –≤ –¥–Ω—è—Ö
   */
  private findStartIndex(candles: CandleWithIndicators[], offsetDays: number): number {
    if (offsetDays === 0) {
      return 0;
    }

    const startTime = new Date(candles[0].dateUTC2!);
    const targetTime = new Date(startTime.getTime() + offsetDays * 24 * 60 * 60 * 1000);

    // –ò—â–µ–º –±–ª–∏–∂–∞–π—à—É—é —Å–≤–µ—á—É –∫ —Ü–µ–ª–µ–≤–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
    for (let i = 0; i < candles.length; i++) {
      const candleTime = new Date(candles[i].dateUTC2!);
      if (candleTime >= targetTime) {
        return i;
      }
    }

    return candles.length - 1; // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–Ω–¥–µ–∫—Å
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –≤—Å–µ–º —á–∞—Å—Ç—è–º –¥–µ–ø–æ–∑–∏—Ç–∞
   * –ó–î–ï–°–¨ –ü–†–ò–ú–ï–ù–Ø–ï–¢–°–Ø –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ò–ï!
   */
  private calculateAggregatedResults(
    parts: DepositPartResult[],
    params: TimeShiftParams,
    allCandles: CandleWithIndicators[]
  ): TimeShiftResults {

    if (parts.length === 0) {
      throw new Error('No active deposit parts found');
    }

    // –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°—É–º–º–∏—Ä—É–µ–º PnL —Å —É—á–µ—Ç–æ–º –¥–æ–ª–∏ –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏ –≤ –æ–±—â–µ–º –¥–µ–ø–æ–∑–∏—Ç–µ
    const totalRealizedPnl = parts.reduce((sum, part) =>
      sum + (part.strategyResults.totalRealizedPnl * part.depositFraction), 0);

    const totalUnrealizedPnl = parts.reduce((sum, part) =>
      sum + (part.strategyResults.totalUnrealizedPnl * part.depositFraction), 0);

    const totalPnl = totalRealizedPnl + totalUnrealizedPnl;

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–ë–ï–ó –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è - —ç—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞)
    const totalCycles = parts.reduce((sum, part) => sum + part.strategyResults.cycles.length, 0);
    const totalClosedCycles = parts.reduce((sum, part) =>
      sum + part.strategyResults.cycles.filter(c => !c.isActive).length, 0);
    const totalOpenCycles = parts.reduce((sum, part) =>
      sum + part.strategyResults.cycles.filter(c => c.isActive).length, 0);
    const totalForcedClosures = parts.reduce((sum, part) => sum + part.strategyResults.forcedClosures, 0);

    // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    const entryTimes = parts.map(p => p.actualStartTime).sort();
    const firstEntryTime = entryTimes[0];
    const lastEntryTime = entryTimes[entryTimes.length - 1];

    const result: TimeShiftResults = {
      enabled: true,
      params,
      parts,
      totalRealizedPnl,
      totalUnrealizedPnl,
      totalPnl,
      weightedAverageReturn: totalPnl, // –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ —Ä–∞–≤–µ–Ω –æ–±—â–µ–º—É PnL, —Ç–∞–∫ –∫–∞–∫ –≤—Å–µ —á–∞—Å—Ç–∏ —Ä–∞–≤–Ω–æ–∑–Ω–∞—á–Ω—ã
      activeParts: parts.length,
      totalCycles,
      totalClosedCycles,
      totalOpenCycles,
      totalForcedClosures,
      firstEntryTime,
      lastEntryTime,
      totalTradingDays: this.calculateTradingDays(allCandles)
    };

    console.log(`üìä Time-shifted backtest completed:`);
    console.log(`  üè¶ Active parts: ${result.activeParts}/${params.depositParts}`);
    console.log(`  üí∞ Total PnL: ${result.totalPnl.toFixed(3)}% (each part contributes ${(100/params.depositParts).toFixed(1)}%)`);
    console.log(`  üîÑ Total cycles: ${result.totalCycles} (${result.totalClosedCycles} closed, ${result.totalOpenCycles} open)`);
    console.log(`  ‚ö° Forced closures: ${result.totalForcedClosures}`);
    console.log(`  üìÖ Entry period: ${firstEntryTime} to ${lastEntryTime}`);

    return result;
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –¥–Ω–µ–π
   */
  private calculateTradingDays(candles: CandleWithIndicators[]): number {
    if (candles.length < 2) return 0;

    const startTime = new Date(candles[0].dateUTC2!);
    const endTime = new Date(candles[candles.length - 1].dateUTC2!);
    const diffTime = Math.abs(endTime.getTime() - startTime.getTime());
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

    return diffDays;
  }
}
