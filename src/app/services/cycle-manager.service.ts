import { Injectable } from '@angular/core';
import { Trade } from './long-strategy.service';
import { ShortTrade } from './short-strategy.service';
import { CandleWithIndicators } from './indicators.service';

export interface TradingCycleLog {
  timestamp: string;
  action: 'CYCLE_START' | 'LONG_ENTRY' | 'SHORT_ENTRY' | 'LONG_AVERAGING' | 'SHORT_AVERAGING' | 'LONG_CLOSED' | 'SHORT_CLOSED' | 'FORCE_CLOSE' | 'CYCLE_END';
  details: string;
  price?: number;
  pnl?: number;
  cycleRealizedPnl?: number;
  openPositions?: string;
}

export interface TradingCycle {
  id: number;
  startTime: string;
  endTime?: string;
  longTrades: Trade[];
  shortTrades: ShortTrade[];
  realizedPnl: number; // –°—É–º–º–∞ PnL –≤—Å–µ—Ö –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫ –≤ —Ü–∏–∫–ª–µ
  unrealizedPnl: number; // –¢–µ–∫—É—â–∏–π –Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π PnL –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
  isActive: boolean;
  forceClosed: boolean; // –ó–∞–∫—Ä—ã—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é 0.5%
  finalPnl?: number;
  logs: TradingCycleLog[]; // –ù–û–í–û–ï: –ª–æ–≥–∏ —Å–æ–±—ã—Ç–∏–π —Ü–∏–∫–ª–∞
}

export interface CyclePnlCheck {
  currentCycleRealizedPnl: number;
  currentUnrealizedPnl: number;
  totalCurrentPnl: number;
  shouldForceClose: boolean;
  threshold: number;
}

@Injectable({
  providedIn: 'root'
})
export class CycleManagerService {
  private cycles: TradingCycle[] = [];
  private currentCycleId = 0;
  private profitThresholdPercent = 0.5; // 0.5% –ø–æ—Ä–æ–≥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è

  getCurrentCycle(): TradingCycle {
    let activeCycle = this.cycles.find(c => c.isActive);

    if (!activeCycle) {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ü–∏–∫–ª
      activeCycle = {
        id: ++this.currentCycleId,
        startTime: new Date().toISOString(),
        longTrades: [],
        shortTrades: [],
        realizedPnl: 0,
        unrealizedPnl: 0,
        isActive: true,
        forceClosed: false,
        logs: [] // –ù–û–í–û–ï: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –ª–æ–≥–æ–≤
      };
      this.cycles.push(activeCycle);
    }

    return activeCycle;
  }

  addTradeToCurrentCycle(trade: Trade | ShortTrade): void {
    const currentCycle = this.getCurrentCycle();

    if (trade.direction === 'LONG') {
      currentCycle.longTrades.push(trade as Trade);
    } else {
      currentCycle.shortTrades.push(trade as ShortTrade);
    }
  }

  addClosedTradeToCurrentCycle(trade: Trade | ShortTrade): void {
    const currentCycle = this.getCurrentCycle();

    // –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –∫ realizedPnl, –∞ —Ç–æ–ª—å–∫–æ –ø–æ–º–µ—á–∞–µ–º —Å–¥–µ–ª–∫—É –∫–∞–∫ –∑–∞–∫—Ä—ã—Ç—É—é
    // realizedPnl –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω –∏–∑ –≤—Å–µ—Ö –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫ –≤ checkCyclePnl
  }

  checkCyclePnl(
    openLongTrade: Trade | null,
    openShortTrade: ShortTrade | null,
    currentCandle: CandleWithIndicators
  ): CyclePnlCheck {
    const currentCycle = this.getCurrentCycle();

    // –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –í–°–ï–ì–î–ê –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º realizedPnl –∏–∑ –≤—Å–µ—Ö –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫
    const closedTrades = [
      ...currentCycle.longTrades.filter(t => t.exitTime), // –¢–æ–ª—å–∫–æ –∑–∞–∫—Ä—ã—Ç—ã–µ
      ...currentCycle.shortTrades.filter(t => t.exitTime)  // –¢–æ–ª—å–∫–æ –∑–∞–∫—Ä—ã—Ç—ã–µ
    ];

    currentCycle.realizedPnl = closedTrades.reduce((sum, trade) => sum + (trade.pnlPercent || 0), 0);

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –ø—Ä–∏–±—ã–ª—å –æ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
    let currentUnrealizedPnl = 0;
    if (openLongTrade?.unrealizedPnlPercent) {
      currentUnrealizedPnl += openLongTrade.unrealizedPnlPercent;
    }
    if (openShortTrade?.unrealizedPnlPercent) {
      currentUnrealizedPnl += openShortTrade.unrealizedPnlPercent;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π PnL –≤ —Ü–∏–∫–ª–µ
    currentCycle.unrealizedPnl = currentUnrealizedPnl;

    // –û–±—â–∏–π PnL —Ü–∏–∫–ª–∞ = —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π (–∏–∑ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫) + –Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π (–æ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö)
    const totalCurrentPnl = currentCycle.realizedPnl + currentUnrealizedPnl;

    // –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Ü–∏–∫–ª–∞
    // –¶–∏–∫–ª –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –¢–û–õ–¨–ö–û –∫–æ–≥–¥–∞ –æ–±—â–∏–π PnL > Cycle Profit Threshold (0.5%)
    // 1) –í—Å–µ —Å–¥–µ–ª–∫–∏ –∑–∞–∫—Ä—ã—Ç—ã –≤ –ø–ª—é—Å –∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π PnL > 0.5%
    // 2) 1 —Å–¥–µ–ª–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –≤ –º–∏–Ω—É—Å, —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π PnL –ø–æ –∑–∞–∫—Ä—ã—Ç—ã–º –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ –º–∏–Ω—É—Å–∞ –Ω–∞ 0.5%
    // 3) 1 —Å–¥–µ–ª–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –≤ –ø–ª—é—Å, —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π + –Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π > 0.5%
    const shouldForceClose = totalCurrentPnl > this.profitThresholdPercent;

    return {
      currentCycleRealizedPnl: currentCycle.realizedPnl,
      currentUnrealizedPnl,
      totalCurrentPnl,
      shouldForceClose,
      threshold: this.profitThresholdPercent
    };
  }

  forceCloseCycle(
    openLongTrade: Trade | null,
    openShortTrade: ShortTrade | null,
    currentCandle: CandleWithIndicators,
    reason: string = 'PROFIT_THRESHOLD_REACHED'
  ): { closedLong: Trade | null, closedShort: ShortTrade | null } {
    const currentCycle = this.getCurrentCycle();

    let closedLong: Trade | null = null;
    let closedShort: ShortTrade | null = null;

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –ª–æ–Ω–≥ –ø–æ–∑–∏—Ü–∏—é
    if (openLongTrade) {
      const avgPrice = openLongTrade.hasAveraging ?
        (openLongTrade.entryPrice + openLongTrade.averagingPrice!) / 2 :
        openLongTrade.entryPrice;
      const totalPositionSize = openLongTrade.hasAveraging ? 0.5 : 0.25;
      const pnlPercent = ((currentCandle.close - avgPrice) / avgPrice) * 100 * totalPositionSize;

      closedLong = {
        ...openLongTrade,
        exitTime: currentCandle.dateUTC2!,
        exitPrice: currentCandle.close,
        exitEma: currentCandle.ema,
        averagePrice: avgPrice,
        totalPositionSize,
        pnlPercent,
        reason: reason
      };

      // –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –ò—â–µ–º –æ—Ç–∫—Ä—ã—Ç—É—é —Å–¥–µ–ª–∫—É –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –µ—ë, –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç
      const existingLongIndex = currentCycle.longTrades.findIndex(t =>
        t.entryTime === openLongTrade.entryTime &&
        t.entryPrice === openLongTrade.entryPrice &&
        !t.exitTime // –¢–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏
      );

      if (existingLongIndex !== -1) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –û–¢–ö–†–´–¢–£–Æ —Å–¥–µ–ª–∫—É
        currentCycle.longTrades[existingLongIndex] = closedLong;
      } else {
        console.error('‚ùå FORCE CLOSE: Could not find open LONG trade to close!', {
          searchFor: { entryTime: openLongTrade.entryTime, entryPrice: openLongTrade.entryPrice },
          existingTrades: currentCycle.longTrades.map(t => ({ entryTime: t.entryTime, entryPrice: t.entryPrice, exitTime: t.exitTime }))
        });
      }
    }

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º —à–æ—Ä—Ç –ø–æ–∑–∏—Ü–∏—é
    if (openShortTrade) {
      const avgPrice = openShortTrade.hasAveraging ?
        (openShortTrade.entryPrice + openShortTrade.averagingPrice!) / 2 :
        openShortTrade.entryPrice;
      const totalPositionSize = openShortTrade.hasAveraging ? 0.5 : 0.25;
      const pnlPercent = ((avgPrice - currentCandle.close) / avgPrice) * 100 * totalPositionSize;

      closedShort = {
        ...openShortTrade,
        exitTime: currentCandle.dateUTC2!,
        exitPrice: currentCandle.close,
        exitEma: currentCandle.ema,
        averagePrice: avgPrice,
        totalPositionSize,
        pnlPercent,
        reason: reason
      };

      // –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –ò—â–µ–º –æ—Ç–∫—Ä—ã—Ç—É—é —Å–¥–µ–ª–∫—É –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –µ—ë, –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç
      const existingShortIndex = currentCycle.shortTrades.findIndex(t =>
        t.entryTime === openShortTrade.entryTime &&
        t.entryPrice === openShortTrade.entryPrice &&
        !t.exitTime // –¢–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏
      );

      if (existingShortIndex !== -1) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –û–¢–ö–†–´–¢–£–Æ —Å–¥–µ–ª–∫—É
        currentCycle.shortTrades[existingShortIndex] = closedShort;
      } else {
        console.error('‚ùå FORCE CLOSE: Could not find open SHORT trade to close!', {
          searchFor: { entryTime: openShortTrade.entryTime, entryPrice: openShortTrade.entryPrice },
          existingTrades: currentCycle.shortTrades.map(t => ({ entryTime: t.entryTime, entryPrice: t.entryPrice, exitTime: t.exitTime }))
        });
      }
    }

    // –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º realizedPnl –∏–∑ –≤—Å–µ—Ö –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫ —Ü–∏–∫–ª–∞
    const allClosedTrades = [
      ...currentCycle.longTrades.filter(t => t.exitTime),
      ...currentCycle.shortTrades.filter(t => t.exitTime)
    ];
    currentCycle.realizedPnl = allClosedTrades.reduce((sum, trade) => sum + (trade.pnlPercent || 0), 0);

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ü–∏–∫–ª
    currentCycle.isActive = false;
    currentCycle.endTime = currentCandle.dateUTC2!;
    currentCycle.forceClosed = true;
    currentCycle.finalPnl = currentCycle.realizedPnl;

    console.log(`üîÑ CYCLE ${currentCycle.id} FORCE CLOSED: ${allClosedTrades.length} closed trades, Final PnL: ${currentCycle.finalPnl.toFixed(3)}%`);

    return { closedLong, closedShort };
  }

  startNewCycle(currentCandle: CandleWithIndicators): TradingCycle {
    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ü–∏–∫–ª –∑–∞–∫—Ä—ã—Ç
    const currentCycle = this.cycles.find(c => c.isActive);
    if (currentCycle) {
      currentCycle.isActive = false;
      currentCycle.endTime = currentCandle.dateUTC2!;

      // –õ–æ–≥–∏—Ä—É–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ —Ü–∏–∫–ª–∞
      currentCycle.logs.push({
        timestamp: currentCandle.dateUTC2!,
        action: 'CYCLE_END',
        details: `Final PnL: ${(currentCycle.finalPnl || currentCycle.realizedPnl).toFixed(3)}%`,
        cycleRealizedPnl: currentCycle.finalPnl || currentCycle.realizedPnl,
        openPositions: 'none'
      });
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ü–∏–∫–ª
    const newCycle: TradingCycle = {
      id: ++this.currentCycleId,
      startTime: currentCandle.dateUTC2!,
      longTrades: [],
      shortTrades: [],
      realizedPnl: 0,
      unrealizedPnl: 0,
      isActive: true,
      forceClosed: false,
      logs: [{
        timestamp: currentCandle.dateUTC2!,
        action: 'CYCLE_START',
        details: 'Cycle started',
        cycleRealizedPnl: 0,
        openPositions: 'none'
      }]
    };

    this.cycles.push(newCycle);
    return newCycle;
  }

  getAllCycles(): TradingCycle[] {
    return [...this.cycles];
  }

  getCurrentCycleStats(): {
    cycleNumber: number;
    realizedPnl: number;
    tradesCount: number;
    isActive: boolean;
  } {
    const currentCycle = this.getCurrentCycle();
    return {
      cycleNumber: currentCycle.id,
      realizedPnl: currentCycle.realizedPnl,
      tradesCount: currentCycle.longTrades.length + currentCycle.shortTrades.length,
      isActive: currentCycle.isActive
    };
  }

  addLogToCurrentCycle(log: TradingCycleLog): void {
    const currentCycle = this.getCurrentCycle();
    currentCycle.logs.push(log);
  }

  logCycleEvent(
    action: TradingCycleLog['action'],
    details: string,
    price?: number,
    pnl?: number,
    openLongTrade?: Trade | null,
    openShortTrade?: ShortTrade | null
  ): void {
    const currentCycle = this.getCurrentCycle();

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
    let openPositions = '';
    if (openLongTrade && openShortTrade) {
      openPositions = `LONG ${openLongTrade.unrealizedPnlPercent?.toFixed(2)}%, SHORT ${openShortTrade.unrealizedPnlPercent?.toFixed(2)}%`;
    } else if (openLongTrade) {
      openPositions = `LONG ${openLongTrade.unrealizedPnlPercent?.toFixed(2)}%`;
    } else if (openShortTrade) {
      openPositions = `SHORT ${openShortTrade.unrealizedPnlPercent?.toFixed(2)}%`;
    } else {
      openPositions = 'none';
    }

    const log: TradingCycleLog = {
      timestamp: new Date().toISOString(),
      action,
      details,
      price,
      pnl,
      cycleRealizedPnl: currentCycle.realizedPnl,
      openPositions
    };

    this.addLogToCurrentCycle(log);
  }

  resetCycles(): void {
    this.cycles = [];
    this.currentCycleId = 0;
  }

  setProfitThreshold(thresholdPercent: number): void {
    this.profitThresholdPercent = thresholdPercent;
  }

  getProfitThreshold(): number {
    return this.profitThresholdPercent;
  }
}
